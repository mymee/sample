<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
xmlns:util="http://www.springframework.org/schema/util" xmlns:jee="http://www.springframework.org/schema/jee"
xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:oxm="http://www.springframework.org/schema/oxm"
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util-3.2.xsd
http://www.springframework.org/schema/jee
http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.2.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
http://www.springframework.org/schema/oxm
http://www.springframework.org/schema/oxm/spring-oxm-3.2.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
default-autowire="byName">

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- @Service단에서 Transaction 처리도 함께 해주기 위해 transaction manager의 order는 2로 내려준다. -->
	<tx:annotation-driven proxy-target-class="true"	order="2" />
	
	<!-- DBCP를 이용한 DataSource 설정
	<bean id="defaultDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQueryTimeout" value="${jdbc.validationQueryTimeout}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
	</bean> -->


	<!-- 멀티 Datasource 설정 
	<bean id="firstDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${first.jdbc.driverClass}" />
		<property name="url" value="${first.jdbc.url}" />
		<property name="username" value="${first.jdbc.username}" />
		<property name="password" value="${first.jdbc.password}" />
		<property name="initialSize" value="${first.jdbc.initialSize}" />
		<property name="minIdle" value="${first.jdbc.minIdle}" />
		<property name="maxIdle" value="${first.jdbc.maxIdle}" />
		<property name="maxActive" value="${first.jdbc.maxActive}" />
		<property name="maxWait" value="${first.jdbc.maxWait}" />
		<property name="removeAbandoned" value="${first.jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${first.jdbc.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${first.jdbc.logAbandoned}" />
		<property name="testOnBorrow" value="${first.jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${first.jdbc.testOnReturn}" />
		<property name="testWhileIdle" value="${first.jdbc.testWhileIdle}" /> 
		<property name="timeBetweenEvictionRunsMillis" value="${first.jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${first.jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQueryTimeout" value="${first.jdbc.validationQueryTimeout}" />
		<property name="validationQuery" value="${first.jdbc.validationQuery}" />  		
	</bean>

	<bean id="secondDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${second.jdbc.driverClass}" />
		<property name="url" value="${second.jdbc.url}" />
		<property name="username" value="${second.jdbc.username}" />
		<property name="password" value="${second.jdbc.password}" />
		<property name="initialSize" value="${second.jdbc.initialSize}" />
		<property name="minIdle" value="${second.jdbc.minIdle}" />
		<property name="maxIdle" value="${second.jdbc.maxIdle}" />
		<property name="maxActive" value="${second.jdbc.maxActive}" />
		<property name="maxWait" value="${second.jdbc.maxWait}" />
		<property name="removeAbandoned" value="${second.jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${second.jdbc.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${second.jdbc.logAbandoned}" />
		<property name="testOnBorrow" value="${second.jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${second.jdbc.testOnReturn}" />
		<property name="testWhileIdle" value="${second.jdbc.testWhileIdle}" /> 
		<property name="timeBetweenEvictionRunsMillis" value="${second.jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${second.jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQueryTimeout" value="${second.jdbc.validationQueryTimeout}" />
		<property name="validationQuery" value="${second.jdbc.validationQuery}" />  		
	</bean> -->

	<!-- JNDI를 이용한 DataSource 설정-->
	<bean id="defaultDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:/jdbc/SBSUSER" />
	</bean> 

	<!-- 멀티 Datasource 설정 
	<bean id="firstDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:jboss/OracleDSJNDIFirst" />
	</bean>
	<bean id="secondDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:jboss/OracleDSJNDISecond" />
	</bean> -->
	
	<util:map id="dataSourceMapNames" key-type="com.bluedigm.framework.database.DataSourceType">
		<!--<entry key="FIRST" value-ref="firstDataSource" />-->
		<!--<entry key="SECOND" value-ref="secondDataSource" />-->
	</util:map>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="dataSource" class="com.bluedigm.framework.database.RoutingDataSource">
		<property name="targetDataSources" ref="dataSourceMapNames" />
		<!-- Default DataSource -->
		<property name="defaultTargetDataSource" ref="defaultDataSource" />
	</bean>

	<!-- Transaction AOP <tx:advice id="txAdvice" transaction-manager="transactionManager">
	<tx:attributes> <tx:method name="get*" read-only="true"/> <tx:method name="search*"
	read-only="true"/> <tx:method name="create*" propagation="REQUIRED" rollback-for="Throwable"/>
	<tx:method name="modify*" propagation="REQUIRED" rollback-for="Throwable"/>
	<tx:method name="remove*" propagation="REQUIRED" rollback-for="Throwable"/>
	<tx:method name="save*" propagation="REQUIRED" rollback-for="Throwable"/>
	</tx:attributes> </tx:advice> <aop:config> <aop:pointcut id="requiredTx"
	expression="execution(* com.bluedigm..impl.*ServiceImpl.*(..))" />
	<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx" /> </aop:config> -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/sql/SqlMapConfig.xml" />
		<property name="mapperLocations" value="classpath*:/sql/**/*_SqlMap.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
</beans>